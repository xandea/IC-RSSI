//
// Generated file, do not edit! Created by nedtool 5.6 from Position.msg.
//

#ifndef __INET_POSITION_M_H
#define __INET_POSITION_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace inet {

class position;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/TagBase_m.h" // import inet.common.TagBase

#include "inet/common/Units_m.h" // import inet.common.Units

#include "inet/common/geometry/Geometry_m.h" // import inet.common.geometry.Geometry


namespace inet {

/**
 * Class generated from <tt>Position.msg:25</tt> by nedtool.
 * <pre>
 * class position extends TagBase
 * {
 *     Coord location;
 *     W signalPower;
 * }
 * </pre>
 */
class position : public ::inet::TagBase
{
  protected:
    Coord location;
    W signalPower = W(NaN);

  private:
    void copy(const position& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const position&);

  public:
    position();
    position(const position& other);
    virtual ~position();
    position& operator=(const position& other);
    virtual position *dup() const override {return new position(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const Coord& getLocation() const;
    virtual Coord& getLocationForUpdate() { return const_cast<Coord&>(const_cast<position*>(this)->getLocation());}
    virtual void setLocation(const Coord& location);
    virtual W getSignalPower() const;
    virtual void setSignalPower(W signalPower);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const position& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, position& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_POSITION_M_H

